//gkcoiの[esm] > [index.js]
//関数:generate, createAsync を呼び出し元から艦隊速度、艦隊索敵値を指定できるよう、以下のように編集しています
//generateに合わせる by momemi
async function createAsync(deckbuilder, f_speed, f_seek, options) {
    const apidata = await (await fetch(options.start2URL)).json();
    const { lang, theme, hqlv, fleets, airbases, airState, comment } = parse(deckbuilder, apidata, options.shipURL);
    const has5slot = fleets.some(({ ships }) => ships.some((ship) => ship.slotNum === 5));
    const fimage = stick(await Promise.all(fleets
        .filter((v, i) => ["dark-ex", "light-ex"].includes(theme) ? i === 0 : true)
        .map(async ({ ships, name }, i) => {
        const los = {
            1: f_seek[0],
            2: f_seek[1],
            3: f_seek[2],
            4: f_seek[3],
        };
        const airPower = ships
            .filter((ship) => ship.id > 0)
            .map((ship) => ship.airPower)
            .reduce((previous, airpower) => {
            previous.min += airpower.min;
            previous.max += airpower.max;
            return previous;
        }, {
            min: 0,
            max: 0,
        });
        const speed = f_speed;
        /*
        const speed = ships
            .filter((ship) => ship.id > 0)
            .map((ship) => ship.speed)
            .reduce((previous, speed) => (previous > speed ? speed : previous), 20);
        */
        switch (theme) {
            case "white":
                return await generateWhiteFleetCanvasAsync(i, ships, lang);
            case "light":
            case "light-ex":
                return await generateLightFleetCanvasAsync(i, ships, los, airPower, speed, lang);
            case "dark":
            case "dark-ex":
                return await generateDarkFleetCanvasAsync(i, ships, los, airPower, speed, lang, deckbuilder?.options);
            case "74lc":
                return await generate74eoLargeCardFleetCanvasAsync(name, ships, los, airPower, lang);
            case "74mc":
                return await generate74eoMediumCutinFleetCanvasAsync(name, ships, los, airPower, lang, has5slot);
            case "74sb":
                return await generate74eoSmallBannerFleetCanvasAsync(name, ships, los, airPower, lang, has5slot);
            case "official":
                return await generateOfficialFleetCanvasAsync(ships, lang);
        }
    })), ["74lc", "74sb", "official"].includes(theme) ||
        fleets.filter(({ ships }) => ships.length > 0).length > 2
        ? 2
        : 1, theme === "dark"
        ? "#212121"
        : theme === "official"
            ? "#ece3d7"
            : theme === "light"
                ? "#FAFAFA"
                : "white");
    if (theme === "dark-ex") {
        const eimage = await generateDarkExpeditionStatsCanvasAsync(fleets[0].ships, lang);
        const { canvas, ctx } = createCanvas2D(fimage.width + eimage.width + 2, fimage.height);
        ctx.fillStyle = "#212121";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(fimage, 0, 0);
        ctx.drawImage(eimage, fimage.width + 2, 0);
        return canvas;
    }
    else if (theme === "light-ex") {
        const eimage = await generateLightExpeditionStatsCanvasAsync(fleets[0].ships, lang);
        const { canvas, ctx } = createCanvas2D(fimage.width + eimage.width + 2, fimage.height);
        ctx.fillStyle = "#FAFAFA";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(fimage, 0, 0);
        ctx.drawImage(eimage, fimage.width + 2, 0);
        return canvas;
    }
    const useAirbase = airbases
        .map(({ items }) => items)
        .some((items) => items.some(({ id }) => id > 0));
    if (useAirbase) {
        if (theme === "dark") {
            const aimage = await generateDarkAirbaseCanvasAsync(airbases, lang);
            const { canvas, ctx } = createCanvas2D(fimage.width + aimage.width + 2, fimage.height);
            ctx.fillStyle = "#212121";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(fimage, 0, 0);
            ctx.drawImage(aimage, fimage.width + 2, 0);
            if (fleets.length > 1) {
                const pimage = await generateDarkParameterCanvasAsync(apidata, [fleets[0].ships, fleets[1].ships].flat(), airState, comment, lang);
                ctx.drawImage(pimage, fimage.width + 2, aimage.height);
            }
            return canvas;
        }
        else if (theme === "light") {
            const aimage = await generateLightAirbaseCanvasAsync(airbases, lang);
            const { canvas, ctx } = createCanvas2D(fimage.width + aimage.width + 2, fimage.height);
            ctx.fillStyle = "#FAFAFA";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(fimage, 0, 0);
            ctx.drawImage(aimage, fimage.width + 2, 0);
            if (fleets.length > 1) {
                const pimage = await generateLightParameterCanvasAsync(apidata, [fleets[0].ships, fleets[1].ships].flat(), airState, comment, lang);
                ctx.drawImage(pimage, fimage.width + 2, aimage.height);
            }
            return canvas;
        }
    }
    return fimage;
}
/**
 * 画像を生成する
 * @param deckbuilder フォーマット
 * @param options 画像取得オプション
 * @return 編成画像
 */
//艦隊速度(f_speed)と艦隊索敵値(f_seek)を呼び出し元から指定する形に編集 by momemi
export async function generate(deckbuilder, f_speed, f_seek, options) {
    if (options?.masterUrl) {
        config.masterUrl = options?.masterUrl;
    }
    const original = await createAsync(deckbuilder, f_speed, f_seek, Object.assign({
        start2URL: `${config.masterUrl}/START2.json`,
        shipURL: `${config.masterUrl}/ship`,
    }, options));
    const src = await steg.encode(lzjs.compress(JSON.stringify(deckbuilder)), original.toDataURL());
    const { canvas, ctx } = createCanvas2D(original.width, original.height);
    ctx.drawImage(await fetchImage(src), 0, 0);
    return canvas;
}